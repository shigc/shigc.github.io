<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员博客</title>
  
  <subtitle>程序员博客</subtitle>
  <link href="https://shigc.top/atom.xml" rel="self"/>
  
  <link href="https://shigc.top/"/>
  <updated>2022-03-26T10:29:35.000Z</updated>
  <id>https://shigc.top/</id>
  
  <author>
    <name>shigc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Win32汇编语言程序设计 - 常用指令</title>
    <link href="https://shigc.top/2022/03/26/asm4/"/>
    <id>https://shigc.top/2022/03/26/asm4/</id>
    <published>2022-03-26T10:29:35.000Z</published>
    <updated>2022-03-26T10:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="1-数据传送指令"><a href="#1-数据传送指令" class="headerlink" title="1. 数据传送指令"></a>1. 数据传送指令</h3><h4 id="1-1-MOV"><a href="#1-1-MOV" class="headerlink" title="1.1 MOV"></a>1.1 MOV</h4><p>从源操作数向目的操作数复制数据</p><p>用法：</p><p>MOV DST,SRC</p><p>说明：</p><ul><li><p>两个操作数尺寸必须一致。例如MOV EBX,AX是错误的</p></li><li><p>两个操作数不能同时为内存操作数。例如MOV [var],[2000H]是错误的</p></li><li><p>目的操作数不能是CS，EIP和IP。例如MOV CS,AX是错误的</p></li><li><p>立即数不能直接送至段寄存器。例如MOV SS,2000H是错误的</p></li></ul><h4 id="1-2-MOVZX"><a href="#1-2-MOVZX" class="headerlink" title="1.2 MOVZX"></a>1.2 MOVZX</h4><p>将源操作数内容复制到目的操作数并将该值零扩展到16位或者32位</p><p>用法：</p><p>MOVZX DST,SRC</p><p>说明：</p><ul><li>只适用于无符号整数</li><li>目的操作数必须是寄存器</li></ul><h4 id="1-3-MOVSX"><a href="#1-3-MOVSX" class="headerlink" title="1.3 MOVSX"></a>1.3 MOVSX</h4><p>将源操作数内容复制到目的操作数并将该值符号扩展到16位或者32位</p><p>用法：</p><p>MOVZX DST,SRC</p><p>说明：</p><ul><li>只适用于有符号整数</li><li>目的操作数必须是寄存器</li></ul><h4 id="1-4-LAHF"><a href="#1-4-LAHF" class="headerlink" title="1.4 LAHF"></a>1.4 LAHF</h4><p>将EFLAGS寄存器的低字节复制到AH寄存器中</p><p>用法：</p><p>LAHF</p><p>说明：</p><p>被复制的标志包含符号标志，零标志，辅助进位标志，奇偶标志和进位标志</p><h4 id="1-5-SAHF"><a href="#1-5-SAHF" class="headerlink" title="1.5 SAHF"></a>1.5 SAHF</h4><p>复制AH寄存器的值到EFLAGS寄存器的低字节</p><p>用法：</p><p>SAHF</p><p>说明：</p><p>用于恢复FLAGS低字节标记位</p><h4 id="1-6-XCHG"><a href="#1-6-XCHG" class="headerlink" title="1.6 XCHG"></a>1.6 XCHG</h4><p>交换两个操作数的内容</p><p>用法：</p><p>XCHG SRC1,SRC2</p><p>说明：</p><p>不接受立即操作数，其它和MOV指令规则一致</p><h4 id="1-7-直接偏移操作数"><a href="#1-7-直接偏移操作数" class="headerlink" title="1.7 直接偏移操作数"></a>1.7 直接偏移操作数</h4><p>对变量地址进行偏移得到新的地址</p><p>用法：</p><p>var+n</p><p>说明：</p><p>偏移数目n为字节，所以在数组元素大小不是1字节时，取下一个元素偏移也不是1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用指令&quot;&gt;&lt;a href=&quot;#常用指令&quot; class=&quot;headerlink&quot; title=&quot;常用指令&quot;&gt;&lt;/a&gt;常用指令&lt;/h2&gt;&lt;h3 id=&quot;1-数据传送指令&quot;&gt;&lt;a href=&quot;#1-数据传送指令&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="assembly" scheme="https://shigc.top/categories/assembly/"/>
    
    
    <category term="assembly" scheme="https://shigc.top/tags/assembly/"/>
    
  </entry>
  
  <entry>
    <title>lua脚本语言入门</title>
    <link href="https://shigc.top/2022/02/26/lua1/"/>
    <id>https://shigc.top/2022/02/26/lua1/</id>
    <published>2022-02-26T14:00:10.000Z</published>
    <updated>2022-02-26T14:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;</summary>
      
    
    
    
    <category term="lua" scheme="https://shigc.top/categories/lua/"/>
    
    
    <category term="programming" scheme="https://shigc.top/tags/programming/"/>
    
    <category term="lua" scheme="https://shigc.top/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark从入门到精通</title>
    <link href="https://shigc.top/2022/02/26/Wireshark%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A1/"/>
    <id>https://shigc.top/2022/02/26/Wireshark%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A1/</id>
    <published>2022-02-26T09:00:17.000Z</published>
    <updated>2022-02-26T09:00:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Wireshark从入门到精通"><a href="#Wireshark从入门到精通" class="headerlink" title="Wireshark从入门到精通"></a>Wireshark从入门到精通</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Wireshark从入门到精通&quot;&gt;&lt;a href=&quot;#Wireshark从入门到精通&quot; class=&quot;headerlink&quot; title=&quot;Wireshark从入门到精通&quot;&gt;&lt;/a&gt;Wireshark从入门到精通&lt;/h2&gt;</summary>
      
    
    
    
    <category term="wireshark" scheme="https://shigc.top/categories/wireshark/"/>
    
    
    <category term="Wireshark" scheme="https://shigc.top/tags/Wireshark/"/>
    
    <category term="network" scheme="https://shigc.top/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Win32汇编语言程序设计 - 基本执行环境</title>
    <link href="https://shigc.top/2022/02/20/asm3/"/>
    <id>https://shigc.top/2022/02/20/asm3/</id>
    <published>2022-02-20T10:29:35.000Z</published>
    <updated>2022-02-20T10:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本寄存器"><a href="#基本寄存器" class="headerlink" title="基本寄存器"></a>基本寄存器</h3><ul><li><p>通用寄存器</p><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>EAX</td><td>累加器(Accumulator)，可用于乘、除、输入&#x2F;输出等操作，它们的使用频率很高</td></tr><tr><td>EBX</td><td>基地址寄存器(BaseRegister)，可作为存储器指针来使用</td></tr><tr><td>ECX</td><td>计数寄存器(CountRegister)，在循环和字符串操作时，要用它来控制循环次数；在位操作中，当移多位时，要用CL来指明移位的位数</td></tr><tr><td>EDX</td><td>数据寄存器(DataRegister)，进行乘、除运算时，它可作为默认的操作数参与运算，也可用于存放I&#x2F;O的端口地址</td></tr><tr><td>EBP&#x2F;ESP</td><td>指针寄存器(PointerRegister)，主要用于存放堆栈内存储单元的偏移量，用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便</td></tr><tr><td>ESI&#x2F;EDI</td><td>变址寄存器(IndexRegister)，它们主要用于存放存储单元在段内的偏移量，用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便</td></tr></tbody></table></li><li><p>段寄存器</p><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>CS</td><td>代码段寄存器(CodeSegmentRegister)，其值为代码段的段值</td></tr><tr><td>SS</td><td>堆栈段寄存器(StackSegmentRegister)，其值为堆栈段的段值</td></tr><tr><td>DS</td><td>数据段寄存器(DataSegmentRegister)，其值为数据段的段值</td></tr><tr><td>ES</td><td>附加段寄存器(ExtraSegmentRegister)，其值为附加数据段的段值</td></tr><tr><td>FS</td><td>附加段寄存器(ExtraSegmentRegister)，其值为附加数据段的段值</td></tr><tr><td>GS</td><td>附加段寄存器(ExtraSegmentRegister)，其值为附加数据段的段值</td></tr></tbody></table></li><li><p>状态标志寄存器（EFLAGS）</p><p>进位标志（CF）：在无符号算术运算的结果太大而超过目的操作数的内存大小时置位</p><p>溢出标志（OF）：在有符号算术运算的结果太大或太小而超过目的操作数内存大小时置位</p><p>符号标志（SF）：在算术或者逻辑运算的结果为负数时置位</p><p>零标志（ZF）：在算术或者逻辑运算的结果为0时置位</p><p>辅助进位标志（AC）：在算术运算导致8位操作数的位3或者位4产生进位时置位</p><p>奇偶标志（PF）：结果的最低有效位字节为1的位的数目为偶数时置位，否则PF复位。</p><p><img src="/images/image-20220219212432533.png" alt="image-20220219212432533"></p></li><li><p>指令指针寄存器（EIP）</p><p>EIP寄存器存放下一条要执行指令的地址，部分机器指令可以修改EIP，使程序分支转移到新的地址执行</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本寄存器&quot;&gt;&lt;a href=&quot;#基本寄存器&quot; class=&quot;headerlink&quot; title=&quot;基本寄存器&quot;&gt;&lt;/a&gt;基本寄存器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通用寄存器&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;功能</summary>
      
    
    
    
    <category term="assembly" scheme="https://shigc.top/categories/assembly/"/>
    
    
    <category term="assembly" scheme="https://shigc.top/tags/assembly/"/>
    
  </entry>
  
  <entry>
    <title>Win32汇编语言程序设计 - 基础组成</title>
    <link href="https://shigc.top/2022/01/22/asm2/"/>
    <id>https://shigc.top/2022/01/22/asm2/</id>
    <published>2022-01-22T10:29:11.000Z</published>
    <updated>2022-01-22T10:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一个基础的汇编语言示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">TITLE 汇编语言示例程序</span><br><span class="line"></span><br><span class="line">; 程序的描述：打印字符串&quot;hello world!\n&quot;</span><br><span class="line">; 作者：shigc</span><br><span class="line">; 创建日期：2022-02-13</span><br><span class="line"></span><br><span class="line">.386</span><br><span class="line">.model flat,stdcall</span><br><span class="line">option casemap :none   ; 大小写敏感</span><br><span class="line">.stack 4096</span><br><span class="line"></span><br><span class="line">include masm32.inc</span><br><span class="line">include kernel32.inc</span><br><span class="line"></span><br><span class="line">includelib masm32.lib</span><br><span class="line">includelib kernel32.lib</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">szHello BYTE &quot;hello world!&quot;,0dh,0ah,0</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main PROC</span><br><span class="line">    invoke StdOut, addr szHello </span><br><span class="line">invoke ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>TITLE伪指令将整行标记为注释，改行可以放置任何东西</li><li>分号是注释符号，编译器会忽略分号右边的所有文本</li><li>.386 指出该程序要求的最低CPU（Intel 386）</li><li>.model 伪指令用于设置程序的内存模型，flat为Windows程序使用的模式(代码和数据使用同一个4GB段)，stdcall为API调用时右边的参数先入栈</li><li>option casemap :none 设置符号（函数和变量）大小写敏感，但是汇编指令还是不区分大小写的</li><li>.stack 4096 设置堆栈大小为4096，默认值1024</li><li>include masm32.inc 用于从masm32.inc文件中复制必需的定义和设置信息，查找目录为INCLUDE环境变量定义的目录</li><li>includelib masm32.lib用于链接过程中从对应静态库中链接对应的符号，查找目录为LIB环境变量定义的目录</li><li>.data 伪指令标识了程序包含变量的区域</li><li>.code 伪指令标识了程序包含指令的区域</li><li>PROC 伪指令用于标识一个过程的开始</li><li>invoke 伪指令用于将参数入栈，并调用过程，addr伪指令用于传递指针参数</li><li>ENDP 伪指令用于标识一个过程的结束</li><li>END 伪指令用于标明该行是汇编源程序最后一行，后面的所有内容不参与编译</li></ul><p><strong>基本组成</strong>：</p><ol><li>汇编指令</li></ol><p>机器码的助记符，有对应的机器码</p><ol start="2"><li>伪指令</li></ol><p>没有对应的机器码，由编译器执行，计算机不执行</p><ol start="3"><li>其他符号</li></ol><p>如+,-,*,&#x2F;等，由编译器识别，没有对应的机器码</p><p><strong>基本元素</strong></p><ol><li>整数常量</li></ol><p>整数常量由符号（可选）开头，后跟一个或多个数字以及一个表示数制基数的字符后缀:[{+|-}] 数字[基数]。以字母开头的十六进制常量前面必须添加一个0，以防止汇编器将其解释为标识符。</p><table><thead><tr><th>基数</th><th>进制</th><th></th><th>基数</th><th>进制</th></tr></thead><tbody><tr><td>h</td><td>十六进制</td><td></td><td>r</td><td>编码实数</td></tr><tr><td>q&#x2F;o</td><td>八进制</td><td></td><td>t</td><td>十进制（可选）</td></tr><tr><td>d</td><td>十进制</td><td></td><td>y</td><td>二进制（可选）</td></tr><tr><td>b</td><td>二进制</td><td></td><td></td><td></td></tr></tbody></table><ol start="2"><li>整数表达式</li></ol><p>整数表达式是包含整数值和算术运算符的数学表达式。整数表达式计算的结果必须是能够以32个数据位存储的整数（0~FFFFFFFFh）。</p><table><thead><tr><th>运算符</th><th>名称</th><th>优先级</th></tr></thead><tbody><tr><td>()</td><td>圆括号</td><td>1</td></tr><tr><td>+, -</td><td>一元加、减（符号位）</td><td>2</td></tr><tr><td>*, &#x2F;</td><td>乘、除</td><td>3</td></tr><tr><td>MOD</td><td>取余数</td><td>3</td></tr><tr><td>+, -</td><td>加、减</td><td>4</td></tr></tbody></table><ol start="3"><li>实数常量</li></ol><p>有两种类型的实数常量：十进制实数和编码（十六进制）实数。</p><ul><li><p>十进制实数常量由符号( sign）、整数（integer）部分、小数点、表示小数的整数和指数（exponent）部分组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">2.</span><br><span class="line">+3.0</span><br><span class="line">-44.2E+05</span><br><span class="line">26.E5</span><br></pre></td></tr></table></figure></li><li><p>编码实数：编码实数是以16进制数表示一个实数的，遵循IEEE浮点数格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">+1.0 可以表示为3F800000r</span><br></pre></td></tr></table></figure><table><thead><tr><th>精度</th><th>说明</th></tr></thead><tbody><tr><td>单精度</td><td>32 位：1 位符号位，8 位阶码，23 位为有效数字的小数部分。大致的规格化范围：2-126 〜2127 。也被称为短实数 (short real)</td></tr><tr><td>双精度</td><td>64 位：1 位符号位，11 位阶码，52 位为有效数字的小数部分。大致的规格化范围：2-1022 〜21023 。也被称为长实数 (longreal)</td></tr><tr><td>扩展双精度</td><td>80 位：1 位符号位，15 位阶码，1 位为整数部分，63 位为有效数字的小数部分。大致的规格化范围：2-16382〜216383。也被称为扩展实数 (extended real)</td></tr></tbody></table></li></ul><ol start="4"><li>字符常量</li></ol><p>字符常量是以单引号或双引号括起来的单个字符。汇编器将其转换为与字符对应的二进制数ASCII码。</p><ol start="5"><li>字符串常量</li></ol><p>字符串常量是以单引号或双引号括起来的串字符。</p><ol start="6"><li>保留字</li></ol><ul><li>指令助记符，如MOV，ADD，和MUL等</li><li>伪指令，用于告诉MASM如何编译程序</li><li>属性，用于为变量和操作数提供有关尺寸以及使用方式的信息，如BYTE，WORD等</li><li>运算符，用在常量表达式中</li><li>预定义符号，如@data，在编译时返回整数常量值。</li></ul><ol start="7"><li>标识符</li></ol><p>标识符是程序员选择的名字，用来标识变量、常量、过程或代码标号。创建标识符时要注意以下几点：</p><ul><li>标识符可包含1~247个字符。</li><li>标识符大小写不敏感（MASM默认）。</li><li>标识符的第一个字符必须是字母（A～Z和a～z）、下划线（_）、@、？或$，后续字符可以是数字。</li><li>标识符不能与汇编器的保留字相同。</li></ul><ol start="8"><li>伪指令</li></ol><p>伪指令是内嵌在程序源代码中，由汇编器识别并执行相应动作的命令。与真正的指令不同，伪指令在程序运行时并不执行。伪指令可用于定义变量、宏以及过程，可用于命名段以及执行许多其他与汇编器相关的簿记任务。MASM 中伪指令大小写不敏感，如.data，.DATA 和.Data 是等价的</p><ol start="9"><li>指令</li></ol><p>汇编语言中的指令是一条汇编语句，在程序被汇编后就变成可执行的机器指了。汇编器把汇编指令翻译成机器语言字节码，在运行时可以加载至内存由处理器执行。一条汇编指令包含4个基本部分：</p><ul><li>标号（可选）</li><li>指令助记符（必需）</li><li>操作数（通常是必需的）</li><li>注释（可选）</li></ul><ol start="10"><li>NOP操作符</li></ol><p>最安全的指令是NOP（no operation），一条NOP 指令占用一个字节的存储，什么也不做。有<br>时编译器或汇编器使用NOP指令把代码对齐到偶数地址边界。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一个基础的汇编语言示例&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="assembly" scheme="https://shigc.top/categories/assembly/"/>
    
    
    <category term="assembly" scheme="https://shigc.top/tags/assembly/"/>
    
  </entry>
  
  <entry>
    <title>Win32汇编语言程序设计 - 环境搭建</title>
    <link href="https://shigc.top/2022/01/20/asm1/"/>
    <id>https://shigc.top/2022/01/20/asm1/</id>
    <published>2022-01-20T10:28:55.000Z</published>
    <updated>2022-01-20T10:28:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用visual studio 2010和masm32搭建win32汇编语言开发环境</p><h3 id="安装masm32："><a href="#安装masm32：" class="headerlink" title="安装masm32："></a>安装masm32：</h3><ol><li>从官网 <a href="http://www.masm32.com/">http://www.masm32.com</a> 下载最新的安装包</li><li>以管理员权限运行安装程序</li></ol><h3 id="安装AsmHighlighter："><a href="#安装AsmHighlighter：" class="headerlink" title="安装AsmHighlighter："></a>安装AsmHighlighter：</h3><p>下载地址<a href="https://download.csdn.net/download/barrysgy/10718561">https://download.csdn.net/download/barrysgy/10718561</a></p><h4 id="使用visual-studio-2010创建项目："><a href="#使用visual-studio-2010创建项目：" class="headerlink" title="使用visual studio 2010创建项目："></a>使用visual studio 2010创建项目：</h4><ol><li><p>新建一个空白项目</p></li><li><p>选中项目-右键-生成自定义-选择masm</p></li></ol><p><img src="/images/image-20220212163511877.png" alt="image-20220212163511877"></p><ol start="3"><li><p>项目属性-配置属性-链接器-系统-子系统修改为控制台 (&#x2F;SUBSYSTEM:CONSOLE)</p></li><li><p>项目属性-配置属性-Microsoft Macro Assembler-General-Include Paths添加masm32的include目录</p></li><li><p>项目属性-配置属性-链接器-常规-附加附加库目录添加masm32的lib目录</p></li><li><p>新建一个hello.asm文件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.486</span><br><span class="line">.model flat, stdcall</span><br><span class="line">option casemap :none   ; case sensitive</span><br><span class="line"></span><br><span class="line">include windows.inc</span><br><span class="line">include masm32.inc</span><br><span class="line">include kernel32.inc</span><br><span class="line">include macros.asm</span><br><span class="line"></span><br><span class="line">includelib masm32.lib</span><br><span class="line">includelib kernel32.lib</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">start:</span><br><span class="line">    print &quot;Hello world&quot;</span><br><span class="line">    exit</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><ol start="7"><li>生成解决方案</li></ol><p><strong>Tips:</strong></p><p>上面步骤如果没有出现Microsoft Macro Assembler配置，请先添加一个.asm后缀结尾的文件到项目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用visual studio 2010和masm32搭建win32汇编语言开发环境&lt;/p&gt;
&lt;h3 id=&quot;安装masm32：&quot;&gt;&lt;a href=&quot;#安装masm32：&quot; class=&quot;headerlink&quot; title=&quot;安装masm32：&quot;&gt;&lt;/a&gt;安装masm32：</summary>
      
    
    
    
    <category term="assembly" scheme="https://shigc.top/categories/assembly/"/>
    
    
    <category term="assembly" scheme="https://shigc.top/tags/assembly/"/>
    
  </entry>
  
  <entry>
    <title>vue环境搭建</title>
    <link href="https://shigc.top/2021/11/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%911-vue%E5%AE%89%E8%A3%85/"/>
    <id>https://shigc.top/2021/11/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%911-vue%E5%AE%89%E8%A3%85/</id>
    <published>2021-11-20T10:18:40.000Z</published>
    <updated>2021-11-20T10:18:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-vue环境搭建"><a href="#1-vue环境搭建" class="headerlink" title="1. vue环境搭建"></a>1. vue环境搭建</h2><h3 id="1-1-安装node-js"><a href="#1-1-安装node-js" class="headerlink" title="1.1 安装node.js"></a>1.1 安装node.js</h3><p><a href="https://nodejs.org/en/download/">Node.js下载地址</a>，选择对应平台下载安装，使用默认设置安装即可</p><h3 id="1-2-设置node-js全局和缓存路径（可选）"><a href="#1-2-设置node-js全局和缓存路径（可选）" class="headerlink" title="1.2 设置node.js全局和缓存路径（可选）"></a>1.2 设置node.js全局和缓存路径（可选）</h3><ol><li><p>在nodejs安装路径下，新建node_global和node_cache两个文件夹</p></li><li><p>设置缓存文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set cache &quot;&lt;nodejs安装路径&gt;\node_cache&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置全局模块存放路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置成功后，之后用命令npm install XXX -g安装以后模块会放在设置的node_global目录里面</span><br><span class="line">npm config set prefix &quot;&lt;nodejs安装路径&gt;\node_global&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-3-安装cnpm-淘宝镜像"><a href="#1-3-安装cnpm-淘宝镜像" class="headerlink" title="1.3 安装cnpm(淘宝镜像)"></a>1.3 安装cnpm(淘宝镜像)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="1-4-设置环境变量"><a href="#1-4-设置环境变量" class="headerlink" title="1.4 设置环境变量"></a>1.4 设置环境变量</h3><p>添加NODE_PATH环境变量，值为&lt;nodejs安装路径&gt;\node_global\node_modules</p><p>并添加&lt;nodejs安装路径&gt;\node_global到PATH中</p><h3 id="1-5-安装vue"><a href="#1-5-安装vue" class="headerlink" title="1.5 安装vue"></a>1.5 安装vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue -g</span><br></pre></td></tr></table></figure><h3 id="1-6-安装vue-cli-脚手架"><a href="#1-6-安装vue-cli-脚手架" class="headerlink" title="1.6 安装vue-cli 脚手架"></a>1.6 安装vue-cli 脚手架</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-cli -g</span><br></pre></td></tr></table></figure><h3 id="1-7-全局安装webpack"><a href="#1-7-全局安装webpack" class="headerlink" title="1.7 全局安装webpack"></a>1.7 全局安装webpack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install webpack -g</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-vue环境搭建&quot;&gt;&lt;a href=&quot;#1-vue环境搭建&quot; class=&quot;headerlink&quot; title=&quot;1. vue环境搭建&quot;&gt;&lt;/a&gt;1. vue环境搭建&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装node-js&quot;&gt;&lt;a href=&quot;#1-1-安装node</summary>
      
    
    
    
    <category term="vue" scheme="https://shigc.top/categories/vue/"/>
    
    
    <category term="vue" scheme="https://shigc.top/tags/vue/"/>
    
    <category term="web" scheme="https://shigc.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>烽火HG2543C1光猫破解教程</title>
    <link href="https://shigc.top/2021/10/20/article4/"/>
    <id>https://shigc.top/2021/10/20/article4/</id>
    <published>2021-10-20T10:28:13.000Z</published>
    <updated>2021-10-20T10:28:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-HG2543C1光猫路由模式改桥接模式"><a href="#1-HG2543C1光猫路由模式改桥接模式" class="headerlink" title="1. HG2543C1光猫路由模式改桥接模式"></a>1. HG2543C1光猫路由模式改桥接模式</h2><h3 id="1-1-打开光猫telnet功能"><a href="#1-1-打开光猫telnet功能" class="headerlink" title="1.1 打开光猫telnet功能"></a>1.1 打开光猫telnet功能</h3><p>浏览器访问 <a href="http://192.168.1.1:8080/cgi-bin/telnetenable.cgi?telnetenable=1">http://192.168.1.1:8080/cgi-bin/telnetenable.cgi?telnetenable=1</a></p><h3 id="1-2-telnet进入光猫获取telecomadmin密码"><a href="#1-2-telnet进入光猫获取telecomadmin密码" class="headerlink" title="1.2 telnet进入光猫获取telecomadmin密码"></a>1.2 telnet进入光猫获取telecomadmin密码</h3><p>登录用户名root，密码是默认wifi密码+默认useradmin密码，具体看光猫背面<br>cat &#x2F;flash&#x2F;cfg&#x2F;agentconf&#x2F;factory.conf 查看telecomadmin密码<br>cat &#x2F;flash&#x2F;cfg&#x2F;app_conf&#x2F;pppoe&#x2F;chap-secrets 查看宽带账号和密码<br><img src="/images/202111132343643.png"></p><h3 id="1-3-使用telecomadmin账号登录"><a href="#1-3-使用telecomadmin账号登录" class="headerlink" title="1.3 使用telecomadmin账号登录"></a>1.3 使用telecomadmin账号登录</h3><p>浏览器访问 <a href="http://192.168.1.1:8080/cgi-bin/login.htm.cgi">http://192.168.1.1:8080/cgi-bin/login.htm.cgi</a><br>打开网络–宽带设置，设置2_INTERNET_B_VID_xxxx连接方式为桥接，具体见下图<br><img src="/images/202111132343260.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-HG2543C1光猫路由模式改桥接模式&quot;&gt;&lt;a href=&quot;#1-HG2543C1光猫路由模式改桥接模式&quot; class=&quot;headerlink&quot; title=&quot;1. HG2543C1光猫路由模式改桥接模式&quot;&gt;&lt;/a&gt;1. HG2543C1光猫路由模式改桥接模式</summary>
      
    
    
    
    <category term="路由器" scheme="https://shigc.top/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
    <category term="光猫" scheme="https://shigc.top/tags/%E5%85%89%E7%8C%AB/"/>
    
    <category term="HG2543C1" scheme="https://shigc.top/tags/HG2543C1/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式速查</title>
    <link href="https://shigc.top/2021/09/20/article3/"/>
    <id>https://shigc.top/2021/09/20/article3/</id>
    <published>2021-09-20T10:27:57.000Z</published>
    <updated>2021-09-20T10:27:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式速查表"><a href="#正则表达式速查表" class="headerlink" title="正则表达式速查表"></a>正则表达式速查表</h3><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\b</td><td align="left">匹配一个单词边界，例如：”er\b”可以匹配”never”中的”er”，但不能匹配”verb”中的”er”</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界，例如：”er\B”能匹配”verb”中的”er”，但不能匹配”never”中的”er”</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符，等价于[0-9]</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符，等价于[^0-9]</td></tr><tr><td align="left">\w</td><td align="left">匹配包括下划线的任何单词字符，等价于”[A-Za-z0-9_]”</td></tr><tr><td align="left">\W</td><td align="left">匹配任何非单词字符，等价于”[^A-Za-z0-9_]“</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等，等价于[ \f\n\r\t\v]</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符，等价于[^ \f\n\r\t\v]</td></tr><tr><td align="left">\t</td><td align="left">匹配一个水平制表符，等价于\x09和\cI和\11</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符，等价于\x0a和\cJ和\12</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符，等价于\x0b和\cK和\13</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符，等价于\x0c和\cL和\14</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符，等价于\x0d和\cM和\15</td></tr><tr><td align="left">\num</td><td align="left">匹配num，其中num是一个正整数，对所获取的匹配的引用，例如，”(.)\1”匹配两个连续的相同字符，</td></tr><tr><td align="left">\xnn</td><td align="left">匹配ASCII代码中十六进制代码为nn的字符，十六进制转义值必须为确定的两个数字长，例如：”\x41”匹配”A”，”\x041”则等价于”\x04&amp;1”，正则表达式中可以使用ASCII编码</td></tr><tr><td align="left">\nml</td><td align="left">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml，例如：字符串为:AA25\nbb23，正则表达式为”(.)\12”，匹配的结果是5&lt;换行符&gt;，而不是AA2和bb2，后者正确的正则表达式为”(.)\1[2]”</td></tr><tr><td align="left">\unnnn</td><td align="left">匹配Unicode代码中十六进制代码为nnnn的字符</td></tr><tr><td align="left">\cx</td><td align="left">匹配由x指明的控制字符，例如：\cM匹配一个Control-M或回车符，x的值必须为A-Z或a-z之一，否则，将c视为一个原义的”c”字符</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符，例如，”n”匹配字符”n”，”\n”匹配一个换行符</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置，如果设置了RegExp对象的Multiline属性，^也匹配”\n”或”\r”之后的位置</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置，如果设置了RegExp对象的Multiline属性，$也匹配”\n”或”\r”之前的位置</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次，例如：zo<em>能匹配”z”以及”zoo”，</em>等价于{0,}</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次，例如，”zo+”能匹配”zo”以及”zoo”，但不能匹配”z”，+等价于{1,}</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次，例如，”do(es)?”可以匹配”does”或”does”中的”do”，?等价于{0,1}</td></tr><tr><td align="left">{n}</td><td align="left">n是一个非负整数，至少匹配n次，例如，”o{2,}”不能匹配”Bob”中的”o”，但能匹配”foooood”中的所有o，”o{1,}”等价于”o+”，”o{0,}”则等价于”o*”</td></tr><tr><td align="left">{n,m}</td><td align="left">m和n均为非负整数，其中n&lt;&#x3D;m，最少匹配n次且最多匹配m次，例如，”o{1,3}”将匹配”fooooood”中的前三个o，”o{0,1}”等价于”o?”，请注意在逗号和两个数之间不能有空格</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的，非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串，例如，对于字符串”oooo”，”o+?”将匹配单个”o”，而”o+”将匹配所有”o”</td></tr><tr><td align="left">.</td><td align="left">匹配除”\n”之外的任何单个字符，要匹配包括”\n”在内的任何字符，请使用像”(.|\n)”的模式</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性，要匹配圆括号字符，请使用”(“或”)“</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用，这在使用或字符”(|)”来组合一个模式的各个部分是很有用，例如”industr(?:y|ies)”就是一个比”industry|industries”更简略的表达式</td></tr><tr><td align="left">(?&#x3D;pattern)</td><td align="left">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用，例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”，预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用，例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”，预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td></tr><tr><td align="left">(?&lt;&#x3D;pattern)</td><td align="left">反向肯定预查，与正向肯定预查类拟，只是方向相反，例如，”(?&lt;&#x3D;95|98|NT|2000)Windows”能匹配”2000Windows”中的”Windows”，但不能匹配”3.1Windows”中的”Windows”</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类拟，只是方向相反，例如”(?&lt;!95|98|NT|2000)Windows”能匹配”3.1Windows”中的”Windows”，但不能匹配”2000Windows”中的”Windows”</td></tr><tr><td align="left">x|y</td><td align="left">匹配x或y，例如，”z|food”能匹配”z”或”food”，”(z|)ood”则匹配”zood”或”food”</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合，匹配所包含的任意一个字符，例如，”[abc]”可以匹配”plain”中的”a”</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合，匹配未包含的任意字符，例如，”[^abc]“可以匹配”plain”中的”p”</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围，匹配指定范围内的任意字符，例如，”[a-z]“可以匹配”a”到”z”范围内的任意小写字母字符</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围，匹配任何不在指定范围内的任意字符，例如，”[^a-z]“可以匹配任何不在”a”到”z”范围内的任意字符</td></tr></tbody></table><h3 id="正则表达式模式修正符-Python"><a href="#正则表达式模式修正符-Python" class="headerlink" title="正则表达式模式修正符(Python)"></a>正则表达式模式修正符(Python)</h3><table><thead><tr><th align="center">符号</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">I</td><td align="left">配置时忽略大小写</td></tr><tr><td align="center">M</td><td align="left">多行匹配，系统默认将字符串作为单一的一”行”字符所组成的（甚至其中包含有换行符也是如此），开启该模式之后^可以匹配每一行的开头</td></tr><tr><td align="center">L</td><td align="left">做本地化识别匹配</td></tr><tr><td align="center">U</td><td align="left">根据Unicode字符及解析字符</td></tr><tr><td align="center">S</td><td align="left">让.匹配包括换行符，即用了该模式之后，’.’可以匹配任意字符</td></tr></tbody></table><h3 id="常见正则表达式"><a href="#常见正则表达式" class="headerlink" title="常见正则表达式"></a>常见正则表达式</h3><table><thead><tr><th align="center">名称</th><th align="left">表达式</th></tr></thead><tbody><tr><td align="center">中文汉字</td><td align="left">[\u4e00-\u9fa5]</td></tr><tr><td align="center">空白行</td><td align="left">\n\s*\r</td></tr><tr><td align="center">email地址</td><td align="left">\ [\w!#$%&amp;’<em>+&#x2F;&#x3D;?^_`{|}<del>-]+(?:.[\w!#$%&amp;’*+&#x2F;&#x3D;?^_`{|}</del>-]+)</em>@(?:[\w](?:[\w-]*[\w])?.)+[\w](?:[\w-]*[\w])?</td></tr><tr><td align="center">URL</td><td align="left">[a-zA-Z]+://[^\s]*</td></tr><tr><td align="center">国内电话号码</td><td align="left">\d{3}-\d{8}|\d{4}-\d{7,8}</td></tr><tr><td align="center">QQ号</td><td align="left">[1-9][0-9]{4,}</td></tr><tr><td align="center">中国邮政编号</td><td align="left">[1-9]\d{5}(?!\d)</td></tr><tr><td align="center">18位身份证号</td><td align="left">^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$</td></tr><tr><td align="center">正整数</td><td align="left">^[1-9]\d*$</td></tr><tr><td align="center">整数</td><td align="left">^-?[1-9]\d*$</td></tr><tr><td align="center">非负整数</td><td align="left">^[1-9]\d*|0$</td></tr><tr><td align="center">正浮点数</td><td align="left">^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$</td></tr></tbody></table><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="http://www.jb51.net/shouce/jquery/regexp.html">正则表达式速查表</a><br><a href="https://www.cnblogs.com/lxh1197412986/p/6753031.html">常见正则表达式</a><br><a href="http://tool.oschina.net/regex/?optionGlobl=global#">在线正则表达式测试工具</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正则表达式速查表&quot;&gt;&lt;a href=&quot;#正则表达式速查表&quot; class=&quot;headerlink&quot; title=&quot;正则表达式速查表&quot;&gt;&lt;/a&gt;正则表达式速查表&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;字符&lt;/th&gt;
&lt;th</summary>
      
    
    
    
    <category term="正则表达式" scheme="https://shigc.top/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
    <category term="regex" scheme="https://shigc.top/tags/regex/"/>
    
    <category term="正则表达式" scheme="https://shigc.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python scrapy自动切换HTTP代理</title>
    <link href="https://shigc.top/2021/08/20/article2/"/>
    <id>https://shigc.top/2021/08/20/article2/</id>
    <published>2021-08-20T10:27:28.000Z</published>
    <updated>2021-08-20T10:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Scrapy中间件动态修改代理IP</p><h3 id="常见的反爬虫及应对策略"><a href="#常见的反爬虫及应对策略" class="headerlink" title="常见的反爬虫及应对策略"></a>常见的反爬虫及应对策略</h3><ol><li><p>通过检查Headers中的User-Agent或者Referer（为了防止盗链）值，应对策略：</p><ul><li><code>在请求的时候动态修改User-Agent值，或者将Referer设置为目标网站的域名地址</code></li></ul></li><li><p>基于用户行为进行反爬虫，同一个IP很短的时间内多次进行访问，应对策略：</p><ul><li><p><code>爬取页面的时候设置阈值，每次抓取完页面sleep一段时间</code></p></li><li><p><code>使用IP代理，在抓取页面的时候动态的切换IP</code></p></li><li><p><code>只抓取动态请求的数据，不直接抓取整个页面</code></p></li></ul></li></ol><h3 id="Scrapy中间件的使用"><a href="#Scrapy中间件的使用" class="headerlink" title="Scrapy中间件的使用"></a>Scrapy中间件的使用</h3><p>1.创建一个中间件对象，并实现<code>process_request(request, spider)</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpProxyMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">    proxy = HttpProxy()</span><br><span class="line"><span class="comment">#这里可以设置请求的user-agent</span></span><br><span class="line"><span class="comment">#request.headers.setdefault(&#x27;User-Agent&#x27;, &quot;Your user agent!&quot;)</span></span><br><span class="line">request.meta[<span class="string">&quot;proxy&quot;</span>] = proxy.get_random_ip()</span><br></pre></td></tr></table></figure><p>这里的HttpProxy是写好的获取代理IP的工具类，返回代理格式：<code>[协议]://[IP]:[PORT]</code></p><p>2.在setting.py中配置创建的中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;myprojects.middlewares.HttpProxyMiddleware&#x27;</span>: <span class="number">300</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="https://github.com/kohn/HttpProxyMiddleware">github上的HttpProxyMiddleware</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用Scrapy中间件动态修改代理IP&lt;/p&gt;
&lt;h3 id=&quot;常见的反爬虫及应对策略&quot;&gt;&lt;a href=&quot;#常见的反爬虫及应对策略&quot; class=&quot;headerlink&quot; title=&quot;常见的反爬虫及应对策略&quot;&gt;&lt;/a&gt;常见的反爬虫及应对策略&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="Python" scheme="https://shigc.top/categories/Python/"/>
    
    
    <category term="python" scheme="https://shigc.top/tags/python/"/>
    
    <category term="scrapy" scheme="https://shigc.top/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>安卓手机用作电脑的HTTP代理服务器</title>
    <link href="https://shigc.top/2021/07/20/article1/"/>
    <id>https://shigc.top/2021/07/20/article1/</id>
    <published>2021-07-20T10:27:14.000Z</published>
    <updated>2021-07-20T10:27:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前电脑上的免费VPN软件比较难找，但是安卓上的免费VPN软件很多，所以考虑手机翻墙后作为电脑端的HTTP代理服务器，让电脑端也可以科学上网</p><h3 id="手机端设置："><a href="#手机端设置：" class="headerlink" title="手机端设置："></a>手机端设置：</h3><ol><li><p>下载安装Termux，google play上可以直接下载</p></li><li><p>在Termux上安装Python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt install python</span><br></pre></td></tr></table></figure></li><li><p>安装<a href="https://github.com/abhinavsingh/proxy.py" title="proxy.py">HTTP代理服务器</a>脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install proxy.py</span><br></pre></td></tr></table></figure></li><li><p>运行HTTP代理服务器（默认端口是8899，可以用port参数指定端口）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ proxy.py --hostname  &lt;手机局域网IP地址&gt;</span><br></pre></td></tr></table></figure><p><strong> 备注：</p></li><li><p>hostname参数不配置的话，默认使用的IP是127.0.0.1，这时手机只能作为本机的代理服务器</p></li><li><p>手机和电脑必须在同一个局域网下（保证手机和电脑能建立连接） </strong></p></li></ol><h3 id="电脑端设置："><a href="#电脑端设置：" class="headerlink" title="电脑端设置："></a>电脑端设置：</h3><ol><li>设置IE的代理:Internet选项–连接–局域网设置–代理服务器，地址为手机局域网地址，端口8899，你也可以安装一些快速切换代理的插件来设置，这里就不多说明了</li></ol><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><p>手机通过电脑代理上网也可以类似地进行操作，在电脑上安装Python和proxy.py，然后运行proxy.py</p><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><p><a href="https://zhuanlan.zhihu.com/p/22683468">知乎：用Android手机做电脑的HTTP代理服务器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目前电脑上的免费VPN软件比较难找，但是安卓上的免费VPN软件很多，所以考虑手机翻墙后作为电脑端的HTTP代理服务器，让电脑端也可以科学上网&lt;/p&gt;
&lt;h3 id=&quot;手机端设置：&quot;&gt;&lt;a href=&quot;#手机端设置：&quot; class=&quot;headerlink&quot; title=&quot;手机</summary>
      
    
    
    
    <category term="Android" scheme="https://shigc.top/categories/Android/"/>
    
    
    <category term="android" scheme="https://shigc.top/tags/android/"/>
    
    <category term="proxy" scheme="https://shigc.top/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>程序的编译和链接</title>
    <link href="https://shigc.top/2021/06/20/c_progamming1/"/>
    <id>https://shigc.top/2021/06/20/c_progamming1/</id>
    <published>2021-06-20T10:26:21.000Z</published>
    <updated>2021-06-20T10:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-程序的编译"><a href="#1-程序的编译" class="headerlink" title="1. 程序的编译"></a>1. 程序的编译</h3><p>编译过程分为两个阶段：编译和汇编，而源文件的编译过程又包含两个主要阶段：编译预处理和编译</p><blockquote><p>预编译：编译预处理读取源代码，对其中的伪指令和特殊符号进行处理。宏展开、引用文件展开等动作均在这个过程完成。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//first.c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;api.h&quot;</span><br><span class="line"></span><br><span class="line">#define SYS_NAME &quot;linux&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello world! %s\n&quot;, SYS_NAME);</span><br><span class="line">    print_hello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预编译将.c文件转换成.i文件，使用的gcc命令时gcc -E，通过gcc -E first.c -o first.i 生成预编译文件，可以看到源码中引用的头文件中对应定义被”内联“宏展开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class="line"># 840 &quot;/usr/include/stdio.h&quot; 3 4</span><br><span class="line">extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class="line"></span><br><span class="line">extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;</span><br><span class="line"></span><br><span class="line">extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class="line"># 868 &quot;/usr/include/stdio.h&quot; 3 4</span><br><span class="line"></span><br><span class="line"># 2 &quot;first.c&quot; 2</span><br><span class="line"># 1 &quot;api.h&quot; 1</span><br><span class="line"></span><br><span class="line"># 1 &quot;api.h&quot;</span><br><span class="line">void print_hello();</span><br><span class="line"># 3 &quot;first.c&quot; 2</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello world! %s\n&quot;, &quot;linux&quot;);</span><br><span class="line">    print_hello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编译：编译程序索要做的工作就是通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码来表示或汇编代码</p></blockquote><p>编译将.c&#x2F;.h文件转换成.s文件，使用的gcc命令是gcc -S，通过gcc -S first.i -o first.s命令将预编译文件生成汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">        .file   &quot;first.c&quot;</span><br><span class="line">        .text</span><br><span class="line">        .section        .rodata</span><br><span class="line">.LC0:</span><br><span class="line">        .string &quot;linux&quot;</span><br><span class="line">.LC1:</span><br><span class="line">        .string &quot;hello world! %s\n&quot;</span><br><span class="line">        .text</span><br><span class="line">        .globl  main</span><br><span class="line">        .type   main, @function</span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">        .cfi_startproc</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        .cfi_def_cfa_offset 16</span><br><span class="line">        .cfi_offset 6, -16</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        .cfi_def_cfa_register 6</span><br><span class="line">        subq    $16, %rsp</span><br><span class="line">        movl    %edi, -4(%rbp)</span><br><span class="line">        movq    %rsi, -16(%rbp)</span><br><span class="line">        leaq    .LC0(%rip), %rsi</span><br><span class="line">        leaq    .LC1(%rip), %rdi</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        call    printf@PLT</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        call    print_hello@PLT</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        leave</span><br><span class="line">        .cfi_def_cfa 7, 8</span><br><span class="line">        ret</span><br><span class="line">        .cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">        .size   main, .-main</span><br><span class="line">        .ident  &quot;GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&quot;</span><br><span class="line">        .section        .note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><blockquote><p>汇编：汇编过程实际上是指把汇编语言代码翻译成目标机器指令的过程。对于被翻译系统处理的每一个源代码，都将最终进过这一处理而得到相应的目标文件，目标文件是为二进制文件，通常为.o文件。</p></blockquote><p>汇编将.s文件转换成.o文件，使用的gcc命令时gcc -c，编译命令是as。通过as first.s -o first.o命令把汇编代码生成机器语言代码，使用objdump -t first.o 命令查看生成的符号表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">first.o：     文件格式 elf64-x86-64</span><br><span class="line"></span><br><span class="line">SYMBOL TABLE:</span><br><span class="line">0000000000000000 l    df *ABS*  0000000000000000 first.c</span><br><span class="line">0000000000000000 l    d  .text  0000000000000000 .text</span><br><span class="line">0000000000000000 l    d  .data  0000000000000000 .data</span><br><span class="line">0000000000000000 l    d  .bss   0000000000000000 .bss</span><br><span class="line">0000000000000000 l    d  .rodata        0000000000000000 .rodata</span><br><span class="line">0000000000000000 l    d  .note.GNU-stack        0000000000000000 .note.GNU-stack</span><br><span class="line">0000000000000000 l    d  .eh_frame      0000000000000000 .eh_frame</span><br><span class="line">0000000000000000 l    d  .comment       0000000000000000 .comment</span><br><span class="line">0000000000000000 g     F .text  0000000000000038 main</span><br><span class="line">0000000000000000         *UND*  0000000000000000 _GLOBAL_OFFSET_TABLE_</span><br><span class="line">0000000000000000         *UND*  0000000000000000 printf</span><br><span class="line">0000000000000000         *UND*  0000000000000000 print_hello</span><br></pre></td></tr></table></figure><h3 id="2-程序的链接"><a href="#2-程序的链接" class="headerlink" title="2. 程序的链接"></a>2. 程序的链接</h3><p>汇编程序生成的目标文件并不能直接执行，其中可能还有许多没有解决的问题。例如，某个源文件中的函数可能引用了另外一个源文件中定义的某个符号；在程序中可能调用了某个库函数等等。所有这些问题都需要经过链接程序处理才得以解决</p><ul><li>程序的链接是将多个.o文件相应的段进行合并，建立映射关系并且合并符号表，进行符号解析，符号解析完成后就是给符号分配的虚拟地址。</li><li>将分配好的虚拟地址与符号表中定义的符号一一对应起来，使其成为正确的地址，使代码段的指令可以根据符号的地址执行相应的操作，最后由链接器生成可执行文件。</li></ul><p>链接处理可以分为静态链接和动态链接。linux下静态链接生成是.a文件，动态链接生成是.so文件。</p><p>静态链接方式生成程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -c api.c -o api.o</span><br><span class="line">ar rcs -o api.a api.o</span><br><span class="line">gcc -static -g -o first_s first.c api.a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-程序的编译&quot;&gt;&lt;a href=&quot;#1-程序的编译&quot; class=&quot;headerlink&quot; title=&quot;1. 程序的编译&quot;&gt;&lt;/a&gt;1. 程序的编译&lt;/h3&gt;&lt;p&gt;编译过程分为两个阶段：编译和汇编，而源文件的编译过程又包含两个主要阶段：编译预处理和编译&lt;/p&gt;</summary>
      
    
    
    
    <category term="programming" scheme="https://shigc.top/categories/programming/"/>
    
    
    <category term="c" scheme="https://shigc.top/tags/c/"/>
    
    <category term="programming" scheme="https://shigc.top/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>Git使用方法和推送项目到远程仓库</title>
    <link href="https://shigc.top/2021/05/20/git001/"/>
    <id>https://shigc.top/2021/05/20/git001/</id>
    <published>2021-05-20T10:25:31.000Z</published>
    <updated>2021-05-20T10:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍git的基本使用方法，以及讲解如何使用git上传项目到远程仓库，这里以<a href="https://gitee.com/">码云</a>为例.</p><h2 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h2><h3 id="1-1-配置用户名和邮箱"><a href="#1-1-配置用户名和邮箱" class="headerlink" title="1.1 配置用户名和邮箱"></a>1.1 配置用户名和邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span>  <span class="comment">#配置用户名</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email&quot;</span>    <span class="comment">#配置邮箱</span></span><br></pre></td></tr></table></figure><h3 id="1-2-生成并部署SSH公钥"><a href="#1-2-生成并部署SSH公钥" class="headerlink" title="1.2 生成并部署SSH公钥"></a>1.2 生成并部署SSH公钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;email&quot;</span>  <span class="comment">#根据邮箱生成SSH密钥，-C参数是可选的</span></span><br></pre></td></tr></table></figure><p>默认生成位置是~&#x2F;.ssh&#x2F;id_rsa.pub，然后将id_rsa.pub添加到远程仓库中，<a href="https://gitee.com/profile/sshkeys">码云网站公钥添加地址</a></p><h3 id="1-3-创建远程仓库"><a href="#1-3-创建远程仓库" class="headerlink" title="1.3 创建远程仓库"></a>1.3 创建远程仓库</h3><p>打开<a href="https://gitee.com/projects/new">新建项目</a>创建新的仓库，github除了可以在网页创建项目外，也可以通过命令行创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u <span class="string">&#x27;用户名&#x27;</span> https://api.github.com/user/repos -d <span class="string">&#x27;&#123;&quot;name&quot;:&quot;仓库名&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-git项目初始化与连接远程仓库"><a href="#2-git项目初始化与连接远程仓库" class="headerlink" title="2. git项目初始化与连接远程仓库"></a>2. git项目初始化与连接远程仓库</h2><h3 id="2-1-初始化本地仓库"><a href="#2-1-初始化本地仓库" class="headerlink" title="2.1 初始化本地仓库"></a>2.1 初始化本地仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init    <span class="comment">#切换到项目所在目录，然后执行该命令</span></span><br></pre></td></tr></table></figure><h3 id="2-2-连接远程仓库"><a href="#2-2-连接远程仓库" class="headerlink" title="2.2 连接远程仓库"></a>2.2 连接远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin  https://gitee.com/username/xxx.git  </span><br></pre></td></tr></table></figure><h3 id="2-3-从远程仓库更新到本地"><a href="#2-3-从远程仓库更新到本地" class="headerlink" title="2.3 从远程仓库更新到本地"></a>2.3 从远程仓库更新到本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master   <span class="comment">#更新.gitignore和README.md等初始文件到本地</span></span><br></pre></td></tr></table></figure><h3 id="2-4-代码更新到本地仓库"><a href="#2-4-代码更新到本地仓库" class="headerlink" title="2.4 代码更新到本地仓库"></a>2.4 代码更新到本地仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .        <span class="comment">#上传所有文件</span></span><br><span class="line">$ git commit -m <span class="string">&#x27;First commit&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-本地仓库代码推送到远程仓库"><a href="#2-5-本地仓库代码推送到远程仓库" class="headerlink" title="2.5 本地仓库代码推送到远程仓库"></a>2.5 本地仓库代码推送到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master   <span class="comment">#如果2.3没有执行可能会报错，可以使用-f参数强制舍弃远程仓库上的文件</span></span><br></pre></td></tr></table></figure><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ:"></a>FAQ:</h2><ol><li>执行git push origin master提示“origin does not to be a git repository”<br>重新输入git remote add origin <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>:yourusername&#x2F;test.git 然后再执行上面的命令</li><li>git忽略已经提交的文件<br>有时候我们添加.gitignore文件之前已经提交过了文件。.gitignore只能忽略那些原来没有被track的文件（自添加以后，从未 add 及 commit 过的文件），如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。就需要执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -r --cached .    <span class="comment">#删除当前目录所有文件追踪状态</span></span><br><span class="line">$ git add .               <span class="comment">#为当前目录文件添加追踪状态</span></span><br><span class="line">$ git commit -m <span class="string">&quot;fixed untracked files&quot;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将介绍git的基本使用方法，以及讲解如何使用git上传项目到远程仓库，这里以&lt;a href=&quot;https://gitee.com/&quot;&gt;码云&lt;/a&gt;为例.&lt;/p&gt;
&lt;h2 id=&quot;1-基本配置&quot;&gt;&lt;a href=&quot;#1-基本配置&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="git" scheme="https://shigc.top/categories/git/"/>
    
    
    <category term="git" scheme="https://shigc.top/tags/git/"/>
    
    <category term="github" scheme="https://shigc.top/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Oracel Linux上安装docker</title>
    <link href="https://shigc.top/2021/04/20/Oracle%20Linux%E5%AE%89%E8%A3%85docker/"/>
    <id>https://shigc.top/2021/04/20/Oracle%20Linux%E5%AE%89%E8%A3%85docker/</id>
    <published>2021-04-20T10:22:31.000Z</published>
    <updated>2021-04-20T10:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Oracel-Linux上安装docker"><a href="#Oracel-Linux上安装docker" class="headerlink" title="Oracel Linux上安装docker"></a>Oracel Linux上安装docker</h3><h4 id="1-安装必须的基本工具"><a href="#1-安装必须的基本工具" class="headerlink" title="1. 安装必须的基本工具"></a>1. 安装必须的基本工具</h4><p><code>yum install -y yum-utils</code></p><h4 id="2-添加docker镜像repo"><a href="#2-添加docker镜像repo" class="headerlink" title="2. 添加docker镜像repo"></a>2. 添加docker镜像repo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="3-更新yum缓存"><a href="#3-更新yum缓存" class="headerlink" title="3. 更新yum缓存"></a>3. 更新yum缓存</h4><p><code>yum makecache fast</code></p><h4 id="4-安装docker"><a href="#4-安装docker" class="headerlink" title="4. 安装docker"></a>4. 安装docker</h4><p><code>yum install docker-ce docker-ce-cli containerd.io</code></p><h4 id="5-运行docker守护进程"><a href="#5-运行docker守护进程" class="headerlink" title="5. 运行docker守护进程"></a>5. 运行docker守护进程</h4><p><code>systemctl start docker</code></p><p>FAQ:</p><ol><li><p>安装docker时提示Requires: fuse-overlayfs &gt;&#x3D; 0.7和Requires: slirp4netns &gt;&#x3D; 0.4的解决方法</p><p>添加下面内容到&#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo最前面，然后执行<code>yum -y install slirp4netns fuse-overlayfs container-selinux</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[centos-extras]</span><br><span class="line">name=Centos extras - $basearch</span><br><span class="line">baseurl=http://mirror.centos.org/centos/7/extras/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Oracel-Linux上安装docker&quot;&gt;&lt;a href=&quot;#Oracel-Linux上安装docker&quot; class=&quot;headerlink&quot; title=&quot;Oracel Linux上安装docker&quot;&gt;&lt;/a&gt;Oracel Linux上安装docker&lt;/</summary>
      
    
    
    
    <category term="docker" scheme="https://shigc.top/categories/docker/"/>
    
    
    <category term="linux" scheme="https://shigc.top/tags/linux/"/>
    
    <category term="docker" scheme="https://shigc.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>quagga的安装和使用</title>
    <link href="https://shigc.top/2021/03/20/quagga-01/"/>
    <id>https://shigc.top/2021/03/20/quagga-01/</id>
    <published>2021-03-20T10:22:10.000Z</published>
    <updated>2021-03-20T10:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Quagga软件原名是Zebra是由一个日本开发团队编写的一个以GNU版权方式发布的软件</p><h3 id="1-下载源码并编译安装："><a href="#1-下载源码并编译安装：" class="headerlink" title="1.下载源码并编译安装："></a>1.下载源码并编译安装：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos code]# git clone https://gitee.com/opensi/quagga.git</span><br><span class="line">[root@centos code]# cd quagga/</span><br><span class="line">[root@centos code]# ./configure --enable-tcp-zebra --enable-mpls --enable-ldpd --enable-vtysh --enable-user=root --enable-group=root --enable-vty-group=root</span><br><span class="line">[root@centos quagga]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><!--[root@centos quagga]# ./configure --enable-vtysh --enable-user=root --enable-group=root --enable-vty-group=root--><h3 id="2-复制配置文件到quagga默认配置目录下"><a href="#2-复制配置文件到quagga默认配置目录下" class="headerlink" title="2.复制配置文件到quagga默认配置目录下"></a>2.复制配置文件到quagga默认配置目录下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos quagga]# cp zebra/zebra.conf.sample /usr/local/etc/</span><br><span class="line">[root@centos quagga]# cp ospfd/ospfd.conf.sample /usr/local/etc/</span><br><span class="line">[root@centos quagga]# cp ldpd/ldpd.conf.sample /usr/local/etc/</span><br></pre></td></tr></table></figure><h3 id="3-启动相关进程"><a href="#3-启动相关进程" class="headerlink" title="3.启动相关进程"></a>3.启动相关进程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos quagga]# zebra -d</span><br><span class="line">[root@centos quagga]# ospfd -d</span><br><span class="line">[root@centos quagga]# ldpd -d</span><br></pre></td></tr></table></figure><p>tips:<br>1、如果vmware无法ping通windows，但是windows可以ping通vware虚拟机，需要关闭windows防火墙<br>2、如果zebra收到报文但是ospf无法建立，需要关闭系统防火墙</p><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><p><a href="https://blog.csdn.net/simonczw/article/details/52538671">Linux上实现mpls，ldpd（Quagga）完整步骤</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Quagga软件原名是Zebra是由一个日本开发团队编写的一个以GNU版权方式发布的软件&lt;/p&gt;
&lt;h3 id=&quot;1-下载源码并编译安装：&quot;&gt;&lt;a href=&quot;#1-下载源码并编译安装：&quot; class=&quot;headerlink&quot; title=&quot;1.下载源码并编译安装：&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Quagga" scheme="https://shigc.top/categories/Quagga/"/>
    
    
    <category term="quagga" scheme="https://shigc.top/tags/quagga/"/>
    
    <category term="router" scheme="https://shigc.top/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>博客说明</title>
    <link href="https://shigc.top/2021/02/20/README/"/>
    <id>https://shigc.top/2021/02/20/README/</id>
    <published>2021-02-20T10:19:11.000Z</published>
    <updated>2021-02-20T10:19:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h1><p>基于markdown的个人笔记</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;blog&quot;&gt;&lt;a href=&quot;#blog&quot; class=&quot;headerlink&quot; title=&quot;blog&quot;&gt;&lt;/a&gt;blog&lt;/h1&gt;&lt;p&gt;基于markdown的个人笔记&lt;/p&gt;
</summary>
      
    
    
    
    <category term="readme" scheme="https://shigc.top/categories/readme/"/>
    
    
    <category term="blog" scheme="https://shigc.top/tags/blog/"/>
    
    <category term="readme" scheme="https://shigc.top/tags/readme/"/>
    
  </entry>
  
</feed>
